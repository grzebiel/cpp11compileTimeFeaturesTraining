1/Mark true sentences basing on provided code

#include <iostream>
int main() {
    int a = 0;
    decltype((a)) b = a;
    b++;
    std::cout << a << b;
}

1) decltype can be used to deduce(get) type of expresion
2) after execution b == 1;
3) variables a and b are of same type
4) in decltype((a)) b parenthensis can be removed
5) decltype((a)) b = a; can be replaced with auto b = a;
6) after code execution a==0;
7) it is inaproriate usage of decltype keyword.
8)all other answers are incorrect

2/
#include <initializer_list>
#include <iostream>
struct A{
    A() { std::cout << "1";}
    A(int) { std::cout << "2";}
    A(std::initializer_list<int>) {std::cout << "3";}
    A(int, int) {std::cout << "4";)
};
int main(int argc, char *argv[]) {
    A a1;
    A a2{};
    A a3{ 1 };
    A a4{ 1, 2 };
}

1) a1 will be constructed with default constructor;
2) a2 will be constructed with default constructor;
3) a2 will be constructed with empty initializer list;
4) a1 will be constructed with empty initializer list;
5) a3 will be constructed with A(int) constructor;
6) a3 will be constructed with single argument initialzer list;
7) a4 will be constructed with initializer list;
8) a4 will be constructed with A(int, int) c-tor;
9) this code will not compile;
10)all other answers are incorrect

3/
template<class T1, class T2>
static auto test(T1 a, T2 b) -> decltype(bar(&a, &b), a + b);

1)return type of test will be same as return type of bar(T1*, T2*)
2)return type of test will be same as return type of operator+(T1, T2)
3)return type of test will depend on type used in return statement inside the body
4)decltype is single argument operator
5)this code will never compile
6)this code will not compile if there is no function bar(T1*, T2*)
7)all other answers are incorrect

4/
void foo(int) {
    std::cout << "foo";
}
void bar(int*) {
    std::cout << "bar";
}
int main() {
    foo(NULL);
}

1)this code will not compile;
2)output of the program will be "foo"
3)output of the program will be "bar"
4)output of the program will be undefined
5)usage of nullptr keyword instead of NULL is recommended
6)all other answers are incorrect

5/
int main() {
    int a = 1;
    const int& b = a;
    auto c = b;
}

1) type of c will be int
2) type of c will be const int
3) type of c will be int&
4) type of c will be const int&
5)all other answers are incorrect

6/How to tell compiler to do not generate default c-tor
1)make default constructor private
2)using delete keyword
3)do not declare it
4)all other answers are incorrect

7/How to properly use C array with STL algoritms
1)it is imposible due to lack of iterators in C
2)using pointer aritmetic
3)create vector from C array
4)use std::begin and std::end functions
5)all other answers are incorrect

8/
int main(){
    std::vector<int> v = {1,2,3}
    for (auto el: v)
        std::cout << el++;
}

1)output of program will be 234
2)elements of vector will be modified
3)used for loop can be replaced with for(std::vector<int>::iterator it = v.begin(); it != v.end(); ++it) std::cout << ++(*it);
4)in this example postincrementation is done to go to next element in next iteration
5)all other answers are incorrect

9/
template<typename T1, typename T2>
decltype(T1 + T2) sum(T1 a, T2 b)
{
    return a+b;
}

1)this code will not compile
2)this is proper way of decltype usage
3)alternative function syntax should been used in this situation
4)decltype(T1+T2) should be replaced with auto keyword
5)all other answers are incorrect

10/How to ensure that declared function will work polymorphically
1)with writting proper unit test
2)usign override keyword
3)asking your CO to check it
4)all other answers are incorrect
5)make it virtual

11/How to prevent redefinition of inherited virtual function
1)make it private
2)using final keyword
3)using delete keyword
5)it is not posible in C++
6)all other answers are incorrect

12/How to prevent class from beeing inherited
1)make its constructor privated
2)using final keyword
3)using delete keyword
4)it is imposible
5)all other answers are incorrect

13/Is it possible to make enum with different size than sizeof(int)?
1)some compilers allowes that but this is not part of the standard
2)it is possible only with strong typed enums
3)all other answers are incorrect

14/How to create typedef with template argument
1)it is imposible
2)you have to secify all template arguments with typedef keyword
3)you can use using keyword to make template parametrized typedef
4)all other answers are incorrect

15/For calculation during compile time...
1)...you have to use macros
2)...some basic actions (like sum) are allowed in enums
3)...you should use constexpr
4)consexpr functions can not be used with runtime values

16/
